Highest grossing postal code per quarter to determine if/where a new store can be launched.  

------------ B. CREATE TABLES ------------  

----- CREATE DETAILED TABLE -----  

DROP TABLE IF EXISTS sales_detailed2;  
CREATE TABLE sales_detailed2 (  
	rental_id INTEGER  
	,postal_code VARCHAR (15)  
	,district VARCHAR (50)  
	,rental_date TIMESTAMP  
	,sales_amount NUMERIC(16,2)  
	);  

-- To view empty sales_detailed2 table  
SELECT * FROM sales_detailed2;  

----- CREATE SUMMARY TABLE -----  
DROP TABLE IF EXISTS sales_summary2;  
CREATE TABLE sales_summary2 (  
	postal_code VARCHAR (15)  
	,district VARCHAR (50) 
	,rental_date_by_quarter DOUBLE PRECISION  
	,total_per_quarter INTEGER   
	,sales_amount NUMERIC (16,2)  
	);  

-- To view empty sales_summary2 table	  
SELECT * FROM sales_summary2;  

------------ C. EXTRACT DATA (and insert) ------------  
INSERT INTO sales_detailed2 (  
	rental_id    
	,postal_code  
	,district  
	,rental_date  
	,sales_amount )  
SELECT   
	rental.rental_id  
	,address.postal_code  
	,address.district  
	,rental.rental_date 
	,payment.amount  
FROM payment AS payment   
INNER JOIN rental AS rental  
	ON rental.rental_id = payment.rental_id  
INNER JOIN customer AS customer   
	ON customer.customer_id = payment.customer_id  
INNER JOIN address AS address  
	ON address.address_id = customer.address_id;  
  
-- To view contents of sales_detailed2 table  
SELECT * FROM sales_detailed2;  
  
------------ D. CREATE THE FUNCTION ------------  
CREATE OR REPLACE FUNCTION summary_sales2()   
RETURNS TRIGGER     
AS $$  
BEGIN   
DELETE FROM sales_summary2;   
  
INSERT INTO sales_summary2 (   
SELECT  
	postal_code 
	,district 
	,extract(quarter FROM rental_date) AS quarter   
	,COUNT(rental_id)  
	,SUM(sales_amount)    
	  
FROM sales_detailed2   
GROUP BY 2, 1, 3 
ORDER BY 4 desc  
);   
  
RETURN NEW;   
END;  
$$  
LANGUAGE PLPGSQL;  

-- To view contents of sales_summary2 table  
SELECT * FROM sales_summary2;  
  
------------ E. CREATE THE TRIGGER ------------  
DROP TRIGGER IF EXISTS refresh_summary2 ON sales_summary2; 
CREATE TRIGGER refresh_summary2  
AFTER INSERT ON sales_detailed2  
FOR EACH STATEMENT  
EXECUTE PROCEDURE summary_sales2();  
  
------------ F. CREATE THE PROCEDURE------------  
DROP PROCEDURE IF EXISTS sales_report_refresh2(); 
CREATE PROCEDURE sales_report_refresh2()  
LANGUAGE PLPGSQL  
AS $$  
BEGIN  
DELETE FROM sales_detailed2;  
  
INSERT INTO sales_detailed2 (  
	rental_id    
	,postal_code  
	,district  
	,rental_date  
	,sales_amount )  
SELECT   
	rental.rental_id  
	,address.postal_code  
	,address.district  
	,rental.rental_date  
	,payment.amount  

FROM payment AS payment   
INNER JOIN rental AS rental  
	ON rental.rental_id = payment.rental_id  
INNER JOIN customer AS customer   
	ON customer.customer_id = payment.customer_id  
INNER JOIN address AS address  
	ON address.address_id = customer.address_id;  
  
END;  
$$;  
  
-- To call stored procedure  
CALL sales_report_refresh2();  
  
-- To view results  
SELECT * FROM sales_detailed2;  
SELECT * FROM sales_summary2;  
